/*! `func` grammar compiled for Highlight.js 11.6.0 */
var hljsGrammar=(()=>{"use strict"
;const e=/\"[^\n\"]+\"[Hhcusa]?/,a=/(-?(?!_)([\d_]+|0x[\d_a-fA-F]+)|0b[1_0]+)(?<!_)(?=[\s\)\],;])/
;return s=>({name:"FunC",aliases:["func"],case_insensitive:!1,keywords:{
keyword:["if","ifnot","else","elseif","elseifnot|10","while","do","until","repeat","return","impure","method_id","forall","asm","inline","inline_ref|10"],
literal:["true","false"],
type:["var","int","slice","tuple","cell","builder","cont","_"],built_in:[]},
contains:[{className:"comment",begin:";;",end:/(?=\n)/},{className:"comment",
begin:"{-",end:"-}",contains:["self"]},{className:"meta",begin:/#pragma/,
end:/;/,contains:[{className:"keyword",match:/version|not-version/},{
className:"operator",match:s.regex.either(/>=/,/<=/,/=/,/>/,/</,/\^/)},{
className:"number",match:/([0-9]+)(.[0-9]+)?(.[0-9]+)?/}]},{className:"keyword",
begin:/#include/,end:/;/,contains:[{className:"string",match:e}]},{
className:"number",match:a},{className:"string",match:e},{className:"function",
match:/(?!")(`([^`]+)`|((?=_)_|(?=\{)\{|(?=\})\}|(?![_`{}]))([^;,\[\]\(\)\s~.]+))(?=[(])/
},{className:"variable.constant",match:/\b(const|global)\b/},{
className:"operator",
match:s.regex.either(/<=>/,/>=/,/<=/,/!=/,/==/,/\^>>/,/~>>/,/>>/,/<</,/\/%/,/\^%/,/~%/,/\^\//,/~\//,/\+=/,/-=/,/\*=/,/\/=/,/~\/=/,/\^\/=/,/%=/,/\^%=/,/<<=/,/>>=/,/~>>=/,/\^>>=/,/&=/,/\^=/,/\|=/,/\^/,/=/,/~/,/\//,/%/,/-/,/\*/,/\+/,/>/,/</,/&/,/\|/,/:/,/\?/)
},{className:"puncuation",match:/[.;(),\[\]~{}]/}]})})()
;export default hljsGrammar;